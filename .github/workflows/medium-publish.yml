name: Daily Medium Publishing

on:
  schedule:
    - cron: '0 9 * * *'  # Runs at 9:00 AM UTC every day
  workflow_dispatch:     # Allows manual triggering

jobs:
  publish-to-medium:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-frontmatter markdown2 PyGithub

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Publish to Medium
        env:
          MEDIUM_TOKEN: ${{ secrets.MEDIUM_TOKEN }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          cat > publish_script.py << 'EOL'
          import os
          import requests
          import json
          import frontmatter
          import markdown2
          import smtplib
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          import time
          import glob

          # Email configuration
          TO_EMAIL = os.environ['TO_EMAIL']
          FROM_EMAIL = os.environ['FROM_EMAIL']
          EMAIL_PASSWORD = os.environ['EMAIL_PASSWORD']
          MEDIUM_TOKEN = os.environ['MEDIUM_TOKEN']

          def send_email(subject, body):
              """Send email notification with the given subject and body."""
              msg = MIMEMultipart()
              msg['From'] = FROM_EMAIL
              msg['To'] = TO_EMAIL
              msg['Subject'] = subject

              msg.attach(MIMEText(body, 'plain'))

              try:
                  server = smtplib.SMTP('smtp.gmail.com', 587)
                  server.starttls()
                  server.login(FROM_EMAIL, EMAIL_PASSWORD)
                  text = msg.as_string()
                  server.sendmail(FROM_EMAIL, TO_EMAIL, text)
                  server.quit()
                  print(f"Email sent: {subject}")
              except Exception as e:
                  print(f"Failed to send email: {e}")

          def get_medium_user_id():
              """Get Medium user ID using the API token."""
              headers = {
                  'Authorization': f'Bearer {MEDIUM_TOKEN}',
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
              }
              
              user_response = requests.get('https://api.medium.com/v1/me', headers=headers)
              if user_response.status_code != 200:
                  raise Exception(f"Error getting Medium user: {user_response.text}")
              
              return user_response.json()['data']['id']

          def publish_article(article_path, user_id):
              """Publish an article to Medium."""
              with open(article_path, 'r', encoding='utf-8') as f:
                  post = frontmatter.load(f)
              
              title = post.get('title', 'Untitled Article')
              tags = post.get('tags', [])
              content = post.content
              html_content = markdown2.markdown(content)
              
              headers = {
                  'Authorization': f'Bearer {MEDIUM_TOKEN}',
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
              }
              
              payload = {
                  'title': title,
                  'contentFormat': 'html',
                  'content': html_content,
                  'tags': tags,
                  'publishStatus': 'public'
              }
              
              post_url = f'https://api.medium.com/v1/users/{user_id}/posts'
              response = requests.post(post_url, headers=headers, data=json.dumps(payload))
              
              if response.status_code == 201:
                  # Get the Medium post URL
                  medium_url = response.json()['data']['url']
                  return True, title, medium_url
              else:
                  return False, title, response.text

          def main():
              # Find markdown files in the articles directory
              article_files = glob.glob('articles/*.md')
              
              # Check if articles directory exists
              if not os.path.exists('articles'):
                  msg = "Articles directory not found!"
                  print(msg)
                  send_email("Medium Publishing - No Articles Directory", msg)
                  return
              
              # Check if any articles are available
              if not article_files:
                  msg = "No articles found for publishing in the articles directory."
                  print(msg)
                  send_email("Medium Publishing - No Articles Found", msg)
                  return
              
              # Create publish directory if it doesn't exist
              os.makedirs('publish', exist_ok=True)
              
              # Get only the first 3 articles
              articles_to_publish = article_files[:3]
              
              # Log messages
              logs = []
              published_articles = []
              
              try:
                  # Get Medium user ID
                  user_id = get_medium_user_id()
                  
                  # Process each article
                  for article_path in articles_to_publish:
                      filename = os.path.basename(article_path)
                      print(f"Processing {article_path}")
                      
                      success, title, result = publish_article(article_path, user_id)
                      
                      if success:
                          logs.append(f"✅ Successfully published: '{title}' - {result}")
                          published_articles.append(title)
                          
                          # Move the article to the published folder
                          target_path = os.path.join("publish", filename)
                          os.system(f'git mv "{article_path}" "{target_path}"')
                      else:
                          logs.append(f"❌ Failed to publish '{title}'. Error: {result}")
                      
                      # Sleep to avoid API rate limits
                      time.sleep(3)
                  
                  # Commit and push changes if any articles were published
                  if published_articles:
                      os.system('git add .')
                      commit_msg = "Published " + ", ".join([f"'{title}'" for title in published_articles]) + " to Medium"
                      os.system(f'git commit -m "{commit_msg}"')
                      os.system('git push')
                      
                  # Send email with logs
                  log_text = "\n".join(logs) if logs else "No articles were processed."
                  send_email("Medium Publishing Log", log_text)
                  
              except Exception as e:
                  error_msg = f"Exception occurred: {str(e)}"
                  print(error_msg)
                  send_email("Medium Publishing Error", error_msg)

          if __name__ == "__main__":
              main()
          EOL
          
          # Execute the script
          python publish_script.py